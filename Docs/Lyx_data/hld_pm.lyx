#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
High Level Design [ HLD ]
\begin_inset Newline newline
\end_inset

Predictive Maintenance RUL prediction
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Documented version control
\end_layout

\begin_layout Standard
\paragraph_spacing double
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Date issued
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Authors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30-04-22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial HLD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shikhar Amar, Hitesh Pathak
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
In the present scenario, Air Transport has become quintessential not only
 for human transportation but also for international trade, logistics and
 innumerable other departments.
 Accordingly, proper maintenance of the underlying components of this system
 is of utmost importance.
 Prognostics and Fault detection is an important topic in industry for predictin
g state of assets to avoid downtime and failures, failing which we put the
 lives of general public as well as the health of infrastructure at risk.
\end_layout

\begin_layout Abstract
In this work, we aim at presenting a solution that targets this need of
 the hour, by predicting the remaining useful life of jet engines with varying
 operating conditions and failure modes.
 Prediction models are based on the simulated Run-to-failure data set for
 turbofan jet engines.
 Finally, the models are validated by checking against test data-set.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose of document
\end_layout

\begin_layout Standard
The purpose of this High-Level-Document (HLD) is to define the high level
 outline and description of this project, which provides a suitable programming
 model.
 This also helps in preemptive detection of contradictions and potential
 pitfalls / out-sights prior to coding and provides.
 To the reader, the document can serve as a reference manual to understand
 how various components of the project works at a high level and to understand
 the end goal of it.
\end_layout

\begin_layout Paragraph
HLD will :
\end_layout

\begin_layout Itemize
Design aspects of the system.
\end_layout

\begin_layout Itemize
Describe the API or UI that is exposed to the users.
\end_layout

\begin_layout Itemize
Describe all the internal software / hardware interfaces.
\end_layout

\begin_layout Itemize
Describe technical requirements.
\end_layout

\begin_layout Itemize
Describe enhancements that can be made.
\end_layout

\begin_layout Itemize
List the non functional attributes of system like :
\end_layout

\begin_deeper
\begin_layout Itemize
Reliability
\end_layout

\begin_layout Itemize
Maintainability
\end_layout

\begin_layout Itemize
Resource Utilization
\end_layout

\begin_layout Itemize
Response Time
\end_layout

\end_deeper
\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The HLD discusses the structure of the system, including database architecture,
 application flow (navigation), and technology architecture.
 We use mildly technical language throughout the document which should be
 easily understandable to system administrators.
\end_layout

\begin_layout Subsection
Definitions
\end_layout

\begin_layout Standard
\paragraph_spacing double
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Terms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RUL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Remaining useful life
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AWS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Amazon Web Services
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Developement Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
General Description
\end_layout

\begin_layout Subsection
Product perspective
\end_layout

\begin_layout Standard
Remaining useful life (RUL) prediction system works by modeling asset degradatio
n through specific machine-learning algorithms that are selected based upon
 the type of data provided.
 This prognostics system can help eliminate the chance of failure or downtime
 leading to a more consistent and fault-tolerant infrastructure which in
 turn reduces the risk over civilians due to ill-maintained assets.
\end_layout

\begin_layout Subsection
Experimental scenario
\end_layout

\begin_layout Standard
The training data is not empirical but simulated public data set for asset
 degradation modeling from NASA that contains Run-to-failure data for turbofan
 engines, simulated using C-MAPSS.
 There are several data sets that account for distinct operating conditions
 and fault modes.
 Each data set consists multiple multivariate time series, where a unit
 of time is a cycle of operation for the engine.
 Each time series in the set corresponds to a different engine, hence the
 data can be considered to be from a group of similar engines.
\end_layout

\begin_layout Standard
Each engine starts with a different initial condition including manufacturing
 flaws, variations; these however are not considered as a fault condition.
 The data also includes three 
\emph on
operational settings 
\emph default
and data from 21 
\emph on
sensors
\emph default
, all columns in the data set indicate different variables as shown :
\end_layout

\begin_layout Enumerate
Unit number of engine.
\end_layout

\begin_layout Enumerate
Time in cycles of operation.
\end_layout

\begin_layout Enumerate
Operational setting 1
\end_layout

\begin_layout Enumerate
Operational setting 2
\end_layout

\begin_layout Enumerate
Operational setting 3
\end_layout

\begin_layout Enumerate
Sensor 1
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{enumi}{25}
\end_layout

\end_inset

Sensor 2
\end_layout

\begin_deeper
\begin_layout Standard
\SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Enumerate
Sensor 21
\end_layout

\begin_layout Standard
Every engine is operating normally at the start of its time series, and
 develops a fault at some time during the series.
 The fault grows in magnitude, until system failure.
\end_layout

\begin_layout Subsection
Problem statement
\end_layout

\begin_layout Standard
The test data sets should be similar in structure to the training data,
 the only difference being that the time series stops somewhere before failure.
 Given a test data set, the end goal of our model is to predict the RUL
 for each engine.
 RUL is equivalent to the number of flights or cycles that the engine can
 undergo after the last cycle in the time series for engine and before its
 breakdown.
\end_layout

\begin_layout Subsection
Proposed Solution
\end_layout

\begin_layout Standard
The solution proposed here is a RUL detection system, which selects a suitable
 machine-learning algorithm based on the characteristics of input data set
 to model degradation of the engine.
 The predicted RUL can then be used to estimate the heath of the engine
 and to decide if maintenance or replacement is needed.
 This solution can be of immense use in Prognostics industry, to help prevent
 failure of the infrastructure which can potentially endanger humans who
 rely on it.
\end_layout

\begin_layout Subsection
Further improvements
\end_layout

\begin_layout Standard
This detection system can be further enhanced by adding more sensors, fault
 modes to the data sets.
 Also critical assets other than engine can be incorporated, by providing
 degradation data for those and training the algorithm.
\end_layout

\begin_layout Standard
Other prediction systems can also be used together with RUL prediction;
 for instance, together with a weather forecasting algorithm we can predict
 if a flight should be delayed or not.
\end_layout

\begin_layout Subsection
Technical requirements
\end_layout

\begin_layout Subsection
Data requirements
\end_layout

\begin_layout Subsection
Tools used
\end_layout

\begin_layout Itemize
Pycharm is used as the IDE.
\end_layout

\begin_layout Itemize
For visualization and EDA; Matplotlib, Seaborn, Plotly libraries are used.
\end_layout

\begin_layout Itemize
Pandas is used for data processing and validation.
\end_layout

\begin_layout Itemize
Git is used for version control.
\end_layout

\begin_layout Itemize
GitHub is used to manage git repositories.
\end_layout

\begin_layout Subsection
Constraints
\end_layout

\begin_layout Itemize
The RUL detection system should be user friendly, and should not require
 the user to understand the internal workings.
\end_layout

\begin_layout Itemize
The solution should be portable and should work irrespective of the operating
 system of the user.
\end_layout

\begin_layout Subsection
Assumptions
\end_layout

\begin_layout Standard
It is assumed that the test data for prediction, has a similar structure
 as the training data i.e., it contains readings from same number of sensors
 and the number of operational settings is also same as training data sets.
 Further we have assumed that for each engine, degradation starts after
 first use, this may or may not be the case in a practical scenario as a
 fault can develop at any time during the life-cycle of the engine.
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Subsection
Process flow
\end_layout

\begin_layout Standard
We use a Regression based model for RUL prediction.
 The process flow diagram is shown below.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip*
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename graphics/methodology.png
	scale 60

\end_inset


\end_layout

\begin_layout Subsubsection
Model training and evaluation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename graphics/Training.png
	scale 60

\end_inset


\end_layout

\begin_layout Subsubsection
Deployment Process
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Standard
Logs are kept for every event, so that a user or an administrator can easily
 troubleshoot or debug the program.
 Logging is done using the python logging library, the steps are described
 below :
\end_layout

\begin_layout Enumerate
For each event, it's logging level ( Info, Warning, Debug etc.
 ) is identified.
\end_layout

\begin_layout Enumerate
The logs are committed by the appropriate handler.
\end_layout

\begin_layout Enumerate
Along with writing logs to a file, appropriate messages are displayed to
 the user.
\end_layout

\begin_layout Enumerate
The logs can be either kept at a local system in flat file or database,
 as the developer required.
\end_layout

\begin_layout Enumerate
Logging should keep resource usage to a minimum, so it does not affect the
 program flow.
\end_layout

\begin_layout Subsection
Error handling
\end_layout

\begin_layout Standard
An Error is an event that should not occur under normal and intended usage
 of the program.
 When an error occurs, the system logs it in the error log and an error
 message is displayed to the user which can be used for troubleshooting.
\end_layout

\begin_layout Section
Performance
\end_layout

\begin_layout Standard
The RUL detection system can be used in Prognostics or health management
 industries, where it can alert the concerned department about RUL of engines,
 and if any of them are in a critical need of maintenance or replacement.
 As the solution can be easily deployed to cloud, it will be easily accessible
 to the users.
 Performance depends largely on the cloud engine and hence is irrespective
 of the user system.
\end_layout

\begin_layout Standard
The accuracy of the system relies on the training data, therefore as a prerequis
ite the user should make sure that the test data and training data correspond
 to similar class of engines.
 Otherwise a poorly trained model could raise false alarms, or fail to warn
 when required, which could have catastrophic repercussions.
\end_layout

\begin_layout Subsection
Portability and re-usability
\end_layout

\begin_layout Standard
The model program can be entirely deployed on the cloud, after it has been
 trained by the developers.
 Therefore the solution is by design, portable.
\end_layout

\begin_layout Standard
The program code is written in a modular fashion, which aids in re-usability
 and maintenance of code over long time.
 The individual modules can be easily modified and reused.
\end_layout

\begin_layout Subsection
Application compatibility
\end_layout

\begin_layout Standard
All the core components of this system are interconnected with Python as
 an interface.
 Each component performs its own individual task and Python interface provides
 communication between the modules.
\end_layout

\begin_layout Subsection
Resource Utilization
\end_layout

\begin_layout Standard
The program utilizes maximum resources of the system while performing a
 task.
\end_layout

\begin_layout Subsection
Deployment
\end_layout

\begin_layout Section
Conclusion
\end_layout

\end_body
\end_document
